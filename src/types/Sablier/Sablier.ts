// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class CreateCompoundingStream extends EthereumEvent {
  get params(): CreateCompoundingStream__Params {
    return new CreateCompoundingStream__Params(this);
  }
}

export class CreateCompoundingStream__Params {
  _event: CreateCompoundingStream;

  constructor(event: CreateCompoundingStream) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get exchangeRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get senderSharePercentage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipientSharePercentage(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PayInterest extends EthereumEvent {
  get params(): PayInterest__Params {
    return new PayInterest__Params(this);
  }
}

export class PayInterest__Params {
  _event: PayInterest;

  constructor(event: PayInterest) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get senderInterest(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recipientInterest(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sablierInterest(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TakeEarnings extends EthereumEvent {
  get params(): TakeEarnings__Params {
    return new TakeEarnings__Params(this);
  }
}

export class TakeEarnings__Params {
  _event: TakeEarnings;

  constructor(event: TakeEarnings) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateFee extends EthereumEvent {
  get params(): UpdateFee__Params {
    return new UpdateFee__Params(this);
  }
}

export class UpdateFee__Params {
  _event: UpdateFee;

  constructor(event: UpdateFee) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Paused extends EthereumEvent {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends EthereumEvent {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserAdded extends EthereumEvent {
  get params(): PauserAdded__Params {
    return new PauserAdded__Params(this);
  }
}

export class PauserAdded__Params {
  _event: PauserAdded;

  constructor(event: PauserAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserRemoved extends EthereumEvent {
  get params(): PauserRemoved__Params {
    return new PauserRemoved__Params(this);
  }
}

export class PauserRemoved__Params {
  _event: PauserRemoved;

  constructor(event: PauserRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreateStream extends EthereumEvent {
  get params(): CreateStream__Params {
    return new CreateStream__Params(this);
  }
}

export class CreateStream__Params {
  _event: CreateStream;

  constructor(event: CreateStream) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get deposit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get startTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get stopTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class WithdrawFromStream extends EthereumEvent {
  get params(): WithdrawFromStream__Params {
    return new WithdrawFromStream__Params(this);
  }
}

export class WithdrawFromStream__Params {
  _event: WithdrawFromStream;

  constructor(event: WithdrawFromStream) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CancelStream extends EthereumEvent {
  get params(): CancelStream__Params {
    return new CancelStream__Params(this);
  }
}

export class CancelStream__Params {
  _event: CancelStream;

  constructor(event: CancelStream) {
    this._event = event;
  }

  get streamId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get senderBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get recipientBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Sablier__getStreamResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Sablier__getCompoundingStreamResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    map.set("value8", EthereumValue.fromUnsignedBigInt(this.value8));
    map.set("value9", EthereumValue.fromUnsignedBigInt(this.value9));
    map.set("value10", EthereumValue.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class Sablier__interestOfResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Sablier extends SmartContract {
  static bind(address: Address): Sablier {
    return new Sablier("Sablier", address);
  }

  nextStreamId(): BigInt {
    let result = super.call("nextStreamId", []);

    return result[0].toBigInt();
  }

  try_nextStreamId(): CallResult<BigInt> {
    let result = super.tryCall("nextStreamId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isPauser(account: Address): boolean {
    let result = super.call("isPauser", [EthereumValue.fromAddress(account)]);

    return result[0].toBoolean();
  }

  try_isPauser(account: Address): CallResult<boolean> {
    let result = super.tryCall("isPauser", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", []);

    return result[0].toBoolean();
  }

  try_paused(): CallResult<boolean> {
    let result = super.tryCall("paused", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  cTokenManager(): Address {
    let result = super.call("cTokenManager", []);

    return result[0].toAddress();
  }

  try_cTokenManager(): CallResult<Address> {
    let result = super.tryCall("cTokenManager", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  fee(): BigInt {
    let result = super.call("fee", []);

    return result[0].toBigInt();
  }

  try_fee(): CallResult<BigInt> {
    let result = super.tryCall("fee", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getStream(streamId: BigInt): Sablier__getStreamResult {
    let result = super.call("getStream", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);

    return new Sablier__getStreamResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_getStream(streamId: BigInt): CallResult<Sablier__getStreamResult> {
    let result = super.tryCall("getStream", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Sablier__getStreamResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  deltaOf(streamId: BigInt): BigInt {
    let result = super.call("deltaOf", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);

    return result[0].toBigInt();
  }

  try_deltaOf(streamId: BigInt): CallResult<BigInt> {
    let result = super.tryCall("deltaOf", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(streamId: BigInt, who: Address): BigInt {
    let result = super.call("balanceOf", [
      EthereumValue.fromUnsignedBigInt(streamId),
      EthereumValue.fromAddress(who)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(streamId: BigInt, who: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromUnsignedBigInt(streamId),
      EthereumValue.fromAddress(who)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isCompoundingStream(streamId: BigInt): boolean {
    let result = super.call("isCompoundingStream", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);

    return result[0].toBoolean();
  }

  try_isCompoundingStream(streamId: BigInt): CallResult<boolean> {
    let result = super.tryCall("isCompoundingStream", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getCompoundingStream(streamId: BigInt): Sablier__getCompoundingStreamResult {
    let result = super.call("getCompoundingStream", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);

    return new Sablier__getCompoundingStreamResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_getCompoundingStream(
    streamId: BigInt
  ): CallResult<Sablier__getCompoundingStreamResult> {
    let result = super.tryCall("getCompoundingStream", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Sablier__getCompoundingStreamResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  interestOf(streamId: BigInt, amount: BigInt): Sablier__interestOfResult {
    let result = super.call("interestOf", [
      EthereumValue.fromUnsignedBigInt(streamId),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return new Sablier__interestOfResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_interestOf(
    streamId: BigInt,
    amount: BigInt
  ): CallResult<Sablier__interestOfResult> {
    let result = super.tryCall("interestOf", [
      EthereumValue.fromUnsignedBigInt(streamId),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Sablier__interestOfResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getEarnings(tokenAddress: Address): BigInt {
    let result = super.call("getEarnings", [
      EthereumValue.fromAddress(tokenAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getEarnings(tokenAddress: Address): CallResult<BigInt> {
    let result = super.tryCall("getEarnings", [
      EthereumValue.fromAddress(tokenAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  createStream(
    recipient: Address,
    deposit: BigInt,
    tokenAddress: Address,
    startTime: BigInt,
    stopTime: BigInt
  ): BigInt {
    let result = super.call("createStream", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(deposit),
      EthereumValue.fromAddress(tokenAddress),
      EthereumValue.fromUnsignedBigInt(startTime),
      EthereumValue.fromUnsignedBigInt(stopTime)
    ]);

    return result[0].toBigInt();
  }

  try_createStream(
    recipient: Address,
    deposit: BigInt,
    tokenAddress: Address,
    startTime: BigInt,
    stopTime: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("createStream", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(deposit),
      EthereumValue.fromAddress(tokenAddress),
      EthereumValue.fromUnsignedBigInt(startTime),
      EthereumValue.fromUnsignedBigInt(stopTime)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  createCompoundingStream(
    recipient: Address,
    deposit: BigInt,
    tokenAddress: Address,
    startTime: BigInt,
    stopTime: BigInt,
    senderSharePercentage: BigInt,
    recipientSharePercentage: BigInt
  ): BigInt {
    let result = super.call("createCompoundingStream", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(deposit),
      EthereumValue.fromAddress(tokenAddress),
      EthereumValue.fromUnsignedBigInt(startTime),
      EthereumValue.fromUnsignedBigInt(stopTime),
      EthereumValue.fromUnsignedBigInt(senderSharePercentage),
      EthereumValue.fromUnsignedBigInt(recipientSharePercentage)
    ]);

    return result[0].toBigInt();
  }

  try_createCompoundingStream(
    recipient: Address,
    deposit: BigInt,
    tokenAddress: Address,
    startTime: BigInt,
    stopTime: BigInt,
    senderSharePercentage: BigInt,
    recipientSharePercentage: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("createCompoundingStream", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(deposit),
      EthereumValue.fromAddress(tokenAddress),
      EthereumValue.fromUnsignedBigInt(startTime),
      EthereumValue.fromUnsignedBigInt(stopTime),
      EthereumValue.fromUnsignedBigInt(senderSharePercentage),
      EthereumValue.fromUnsignedBigInt(recipientSharePercentage)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFromStream(streamId: BigInt, amount: BigInt): boolean {
    let result = super.call("withdrawFromStream", [
      EthereumValue.fromUnsignedBigInt(streamId),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_withdrawFromStream(
    streamId: BigInt,
    amount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("withdrawFromStream", [
      EthereumValue.fromUnsignedBigInt(streamId),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  cancelStream(streamId: BigInt): boolean {
    let result = super.call("cancelStream", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);

    return result[0].toBoolean();
  }

  try_cancelStream(streamId: BigInt): CallResult<boolean> {
    let result = super.tryCall("cancelStream", [
      EthereumValue.fromUnsignedBigInt(streamId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class UnpauseCall extends EthereumCall {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class AddPauserCall extends EthereumCall {
  get inputs(): AddPauserCall__Inputs {
    return new AddPauserCall__Inputs(this);
  }

  get outputs(): AddPauserCall__Outputs {
    return new AddPauserCall__Outputs(this);
  }
}

export class AddPauserCall__Inputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPauserCall__Outputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }
}

export class PauseCall extends EthereumCall {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class Initialize1Call extends EthereumCall {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cTokenManagerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class UpdateFeeCall extends EthereumCall {
  get inputs(): UpdateFeeCall__Inputs {
    return new UpdateFeeCall__Inputs(this);
  }

  get outputs(): UpdateFeeCall__Outputs {
    return new UpdateFeeCall__Outputs(this);
  }
}

export class UpdateFeeCall__Inputs {
  _call: UpdateFeeCall;

  constructor(call: UpdateFeeCall) {
    this._call = call;
  }

  get feePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFeeCall__Outputs {
  _call: UpdateFeeCall;

  constructor(call: UpdateFeeCall) {
    this._call = call;
  }
}

export class TakeEarningsCall extends EthereumCall {
  get inputs(): TakeEarningsCall__Inputs {
    return new TakeEarningsCall__Inputs(this);
  }

  get outputs(): TakeEarningsCall__Outputs {
    return new TakeEarningsCall__Outputs(this);
  }
}

export class TakeEarningsCall__Inputs {
  _call: TakeEarningsCall;

  constructor(call: TakeEarningsCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TakeEarningsCall__Outputs {
  _call: TakeEarningsCall;

  constructor(call: TakeEarningsCall) {
    this._call = call;
  }
}

export class InterestOfCall extends EthereumCall {
  get inputs(): InterestOfCall__Inputs {
    return new InterestOfCall__Inputs(this);
  }

  get outputs(): InterestOfCall__Outputs {
    return new InterestOfCall__Outputs(this);
  }
}

export class InterestOfCall__Inputs {
  _call: InterestOfCall;

  constructor(call: InterestOfCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InterestOfCall__Outputs {
  _call: InterestOfCall;

  constructor(call: InterestOfCall) {
    this._call = call;
  }

  get senderInterest(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get recipientInterest(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get sablierInterest(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class CreateStreamCall extends EthereumCall {
  get inputs(): CreateStreamCall__Inputs {
    return new CreateStreamCall__Inputs(this);
  }

  get outputs(): CreateStreamCall__Outputs {
    return new CreateStreamCall__Outputs(this);
  }
}

export class CreateStreamCall__Inputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get deposit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get stopTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateStreamCall__Outputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateCompoundingStreamCall extends EthereumCall {
  get inputs(): CreateCompoundingStreamCall__Inputs {
    return new CreateCompoundingStreamCall__Inputs(this);
  }

  get outputs(): CreateCompoundingStreamCall__Outputs {
    return new CreateCompoundingStreamCall__Outputs(this);
  }
}

export class CreateCompoundingStreamCall__Inputs {
  _call: CreateCompoundingStreamCall;

  constructor(call: CreateCompoundingStreamCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get deposit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get stopTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get senderSharePercentage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get recipientSharePercentage(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateCompoundingStreamCall__Outputs {
  _call: CreateCompoundingStreamCall;

  constructor(call: CreateCompoundingStreamCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawFromStreamCall extends EthereumCall {
  get inputs(): WithdrawFromStreamCall__Inputs {
    return new WithdrawFromStreamCall__Inputs(this);
  }

  get outputs(): WithdrawFromStreamCall__Outputs {
    return new WithdrawFromStreamCall__Outputs(this);
  }
}

export class WithdrawFromStreamCall__Inputs {
  _call: WithdrawFromStreamCall;

  constructor(call: WithdrawFromStreamCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFromStreamCall__Outputs {
  _call: WithdrawFromStreamCall;

  constructor(call: WithdrawFromStreamCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelStreamCall extends EthereumCall {
  get inputs(): CancelStreamCall__Inputs {
    return new CancelStreamCall__Inputs(this);
  }

  get outputs(): CancelStreamCall__Outputs {
    return new CancelStreamCall__Outputs(this);
  }
}

export class CancelStreamCall__Inputs {
  _call: CancelStreamCall;

  constructor(call: CancelStreamCall) {
    this._call = call;
  }

  get streamId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelStreamCall__Outputs {
  _call: CancelStreamCall;

  constructor(call: CancelStreamCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
