import { Cancellation, Stream, Withdrawal } from "../types/schema";
import {
  CreateStream as CreateStreamEvent,
  CreateCompoundingStream as CreateCompoundingStreamEvent,
  WithdrawFromStream as WithdrawFromStreamEvent,
  CancelStream as CancelStreamEvent,
  PayInterest as PayInterestEvent,
} from "../types/Sablier/Sablier";
import { addToken } from "./tokens";
import { addTransaction } from "./transactions";

export function handleCreateStream(event: CreateStreamEvent): void {
  /* Create the stream object */
  let streamId = event.params.streamId.toString();
  let stream = new Stream(streamId);
  stream.deposit = event.params.deposit;
  stream.ratePerSecond = event.params.deposit.div(event.params.stopTime.minus(event.params.startTime));
  stream.recipient = event.params.recipient;
  stream.sender = event.params.sender;
  stream.startTime = event.params.startTime;
  stream.stopTime = event.params.stopTime;
  stream.token = event.params.tokenAddress.toHex();
  stream.txs = new Array<string>();
  stream.withdrawals = new Array<string>();
  stream.save();

  /* Create adjacent but important objects */
  addTransaction("CreateStream", event, streamId);
  addToken(event.params.tokenAddress.toHex());
}

export function handleCreateCompoundingStream(event: CreateCompoundingStreamEvent): void {
  let streamId = event.params.streamId.toString();
  let stream = Stream.load(streamId);
  if (stream == null) {
    return;
  }

  stream.exchangeRateInitial = event.params.exchangeRate;
  stream.senderSharePercentage = event.params.senderSharePercentage;
  stream.recipientSharePercentage = event.params.recipientSharePercentage;
  stream.save();

  addTransaction("CreateCompoundingStream", event, streamId);
}

export function handleWithdrawFromStream(event: WithdrawFromStreamEvent): void {
  let streamId = event.params.streamId.toString();
  let stream = Stream.load(streamId);
  if (stream == null) {
    return;
  }

  let withdrawal = new Withdrawal(event.transaction.hash.toHex());
  withdrawal.amount = event.params.amount;
  withdrawal.stream = streamId;
  withdrawal.timestamp = event.block.timestamp;
  withdrawal.save();

  addTransaction("WithdrawFromStream", event, streamId);
}

export function handleCancelStream(event: CancelStreamEvent): void {
  let streamId = event.params.streamId.toString();
  let stream = Stream.load(streamId);
  if (stream == null) {
    return;
  }

  let cancellation = new Cancellation(streamId);
  cancellation.recipientBalance = event.params.recipientBalance;
  cancellation.senderBalance = event.params.senderBalance;
  cancellation.timestamp = event.block.timestamp;
  cancellation.txhash = event.transaction.hash.toHex();
  cancellation.save();

  stream.cancellation = streamId;
  stream.save();

  addTransaction("CancelStream", event, streamId);
}

export function handlePayInterest(event: PayInterestEvent): void {
  /**
   * This event could be generated by either a `withdrawFromStream` or `cancelStream` tx.
   * We have to check for both - we can't know beforehand.
   */
  let streamId = event.params.streamId.toString();
  let txhash = event.transaction.hash.toHex();
  let cancellation = Cancellation.load(streamId);
  let withdrawal = Withdrawal.load(txhash);

  if (withdrawal != null) {
    withdrawal.recipientInterest = event.params.recipientInterest;
    withdrawal.sablierInterest = event.params.sablierInterest;
    withdrawal.senderInterest = event.params.senderInterest;
  } else if (cancellation != null) {
    cancellation.recipientInterest = event.params.recipientInterest;
    cancellation.sablierInterest = event.params.sablierInterest;
    cancellation.senderInterest = event.params.senderInterest;
  }
}
