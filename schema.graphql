### CTokenManager ###

type CToken @entity {
  id: ID!
  decimals: Int
  name: String
  symbol: String
  whitelisted: Boolean
}

### Sablier ###

type Cancellation @entity {
  id: ID!
  recipientBalance: BigInt!
  recipientInterest: BigInt!
  sablierInterest: BigInt!
  senderBalance: BigInt!
  senderInterest: BigInt!
}

# @derivedFrom makes it possible to map large sets of data to the same raw stream
type RawStream @entity {
  cancellation: Cancellation
  deposit: BigInt!
  exchangeRateInitial: BigInt
  id: ID!
  interval: BigInt!
  recipient: Bytes!
  recipientSharePercentage: BigInt
  sender: Bytes!
  senderSharePercentage: BigInt
  startTime: BigInt!
  stopTime: BigInt!
  streams: [Stream!]! @derivedFrom(field: "rawStream")
  token: Token
  txs: [Transaction!]! @derivedFrom(field: "rawStream")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "rawStream")
}

type Stream @entity {
  id: ID!
  who: Bytes!
  rawStream: RawStream!
  timestamp: Int!
}

type Token @entity {
  id: ID!
  decimals: Int
  name: String
  symbol: String
}

type Transaction @entity {
  id: ID!
  block: Int!
  event: String!
  rawStream: RawStream!
  timestamp: Int!
}

type Withdrawal @entity {
  id: ID!
  amount: BigInt!
  rawStream: RawStream!
  recipientInterest: BigInt!
  sablierInterest: BigInt!
  senderInterest: BigInt!
}

### Payroll ###

type Salary @entity {
  id: ID!
  company: Bytes!
  rawStream: RawStream!
}
