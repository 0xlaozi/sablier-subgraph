type RawStream @entity {
  id: ID!
  interval: BigInt!
  payment: BigInt!
  recipient: Bytes!
  redeemal: Redeemal!
  sender: Bytes!
  startBlock: BigInt!
  stopBlock: BigInt!
  status: StreamStatus!
  streams: [Stream!]! @derivedFrom(field: "rawStream")
  tokenAddress: Bytes!
  txs: [Transaction!]! @derivedFrom(field: "rawStream")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "rawStream")
}

type Stream @entity {
  id: ID!
  flow: StreamFlow!
  owner: Bytes!
  rawStream: RawStream!
}

# Both the sender and the recipient can withdraw money
# Figure out the total earned amount of money by adding up all the withdrawals
# with the value of "recipient" in the Redeemal entity
type Redeemal @entity {
  id: ID!
  rawStream: RawStream!
  recipientAmount: BigInt!
  senderAmount: BigInt!
}

type Transaction @entity {
  id: ID!
  block: Int!
  event: String!
  rawStream: RawStream!
  timestamp: Int!
}

# Only the recipient can withdraw money
type Withdrawal @entity {
  id: ID!
  amount: BigInt!
  rawStream: RawStream!
}

enum StreamFlow {
  Undefined
  In
  Out
}

enum StreamStatus {
  Undefined
  Created
  Redeemed
}
